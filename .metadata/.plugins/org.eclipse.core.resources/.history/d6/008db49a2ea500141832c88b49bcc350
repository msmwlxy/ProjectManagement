package org.future.projectManagement.dao.imp;

import java.util.LinkedHashMap;
import java.util.List;

import javax.annotation.Resource;

import org.future.projectManagement.bean.Student;
import org.future.projectManagement.dao.StudentDao;
import org.future.projectManagement.utils.QueryResult;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;

public class StudentDaoImp implements StudentDao{
	
	private SessionFactory sessionFactory;
	
	@Override
	public SessionFactory getSessionFactory() {
		return sessionFactory;
	}

	@Override
	@Resource
	public void setSessionFactory(SessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory;
	}

	@Override
	public void add(Student student) {
		Session session = sessionFactory.getCurrentSession();
		session.save(student);
	}

	@Override
	public Student find(Class<Student> student, int id) {
		Session session = sessionFactory.getCurrentSession();
		return (Student)session.get(student, id);

	}

	@Override
	public void Update(Student student) {
		Session session = sessionFactory.getCurrentSession();
		session.update(student);
	}

	@Override
	public void delete(Student student) {
		Session session = sessionFactory.getCurrentSession();
		session.delete(student);
		
	}

	@Override
	public void delete(List<Student> list) {
		Session session = sessionFactory.getCurrentSession();
		for(Student student:list){
			session.delete(student);
		}
		
	}

	@Override
	public QueryResult<Student> getQueryResult(int startIndex, int endIndex,
			Object[] parameters, String where,
			LinkedHashMap<String, String> orderBy) {
		Session session = sessionFactory.getCurrentSession();
		
		QueryResult<Student> qr = new QueryResult<Student>();
		Query query = session.createQuery("select o from Student o "+(where==null||"".equals(where.trim())?"":"where "+where+" ")+buildOrderBy(orderBy));
		if(startIndex!=-1&&endIndex!=-1){
			query.setFirstResult(arg0)
		}
		return null;
	}

	@Override
	public QueryResult<Student> getQueryResult(long startIndex, long endIndex,
			Object[] parameters, String where) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public QueryResult<Student> getQueryResult(long startIndex, long endIndex,
			LinkedHashMap<String, String> orderBy) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public QueryResult<Student> getQueryResult(Object[] parameters,
			String where, LinkedHashMap<String, String> orderBy) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public QueryResult<Student> getQueryResult(long startIndex, long endIndex) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public QueryResult<Student> getQueryResult() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public QueryResult<Student> getQueryResult(Object[] parameters, String where) {
		// TODO Auto-generated method stub
		return null;
	}

	public String buildOrderBy(LinkedHashMap<String,String> orderBy){
		StringBuffer sb = new StringBuffer();
		if(orderBy!=null&&orderBy.size() > 0){
			sb.append(" order by ");
			for(String key:orderBy.keySet()){
				sb.append("o."+key+" ").append(orderBy.get(key)).append(",");
			}
			sb.deleteCharAt(sb.length()-1);
			return sb.toString();
		}
		return "";
		
	}
	private void setParameters(Query query, Object[] parameters) {
			
			if(parameters!=null&&parameters.length > 0){
				for(int i = 0;i < parameters.length;i++){
					query.setParameter(i,parameters[i]);
				}
			}
			
		}
}
