package org.future.projectManagement.service.imp;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.future.projectManagement.bean.College;
import org.future.projectManagement.bean.Instructor;
import org.future.projectManagement.bean.Project;
import org.future.projectManagement.bean.ProjectAndPage;
import org.future.projectManagement.bean.ProjectData;
import org.future.projectManagement.bean.ProjectStatu;
import org.future.projectManagement.bean.ProjectType;
import org.future.projectManagement.bean.Student;
import org.future.projectManagement.dao.StudentDao;
import org.future.projectManagement.service.StudentService;
import org.future.projectManagement.utils.DocConverter;
import org.future.projectManagement.utils.QueryResult;
import org.springframework.stereotype.Component;
@Component
public class StudentServiceImp implements StudentService {
	
	private StudentDao studentDao;

	public StudentDao getStudentDao() {
		return studentDao;
	}

	@Resource
	public void setStudentDao(StudentDao studentDao) {
		this.studentDao = studentDao;
	}
	
	/*根据分页，条件，排序进行查询**/
	public  <T> QueryResult<T> getQueryResult(Class<T> entityClass,int startIndex, int MaxResults,
			Object[] parameters, String where,
			LinkedHashMap<String, String> orderBy){
		return studentDao.getQueryResult(entityClass, startIndex, MaxResults, parameters, where, orderBy);
	}
	
	//根据查询条件得到要查询的结果集，并且对结果集中的记录进行排序
	
	@Override
	public  <T> QueryResult<T> getQueryResult(Class<T> StudentClass,Object[] parameters,
			String where, LinkedHashMap<String, String> orderBy) {
		
		return studentDao.getQueryResult(StudentClass, parameters, where, orderBy);
	}
	
	//查找T类所有的记录
		@Override
		public <T> QueryResult<T> getQueryResult(Class<T> entityClass) {
			
			return studentDao.getQueryResult(entityClass,-1, -1, null, null, null);
		}

	/*通过项目id查找项目资料**/
	@Override
	public ProjectData getPdByPid(int projectId) {
		
		return studentDao.findByPid(projectId);
	}
	
	
	//根据申报页面传递过来的参数生成一个项目
	@Override
	public <T> Project createProject(ProjectAndPage<T> pp) {
		
		Student principal = new Student();
		
		principal.setStudentNo(pp.getPrincipalId());
		
		Set<Student> projectMembers = new HashSet<Student>();
		
		Student student;
		
		if(!"000".equals(pp.getStudent1())){
			student = new Student();
			student.setStudentNo(pp.getStudent1());
			projectMembers.add(student);
		}
		if(!"000".equals(pp.getStudent2())){
			student = new Student();
			student.setStudentNo(pp.getStudent2());
			
			if(!projectMembers.contains(student)){
				projectMembers.add(student);
			}
		}
		if(!"000".equals(pp.getStudent3())){
			student = new Student();
			student.setStudentNo(pp.getStudent3());
			if(!projectMembers.contains(student)){
				projectMembers.add(student);
			}
		}
		if(!"000".equals(pp.getStudent4())){
			student = new Student();
			student.setStudentNo(pp.getStudent4());
			if(!projectMembers.contains(student)){
				projectMembers.add(student);
			}
		}
		
		Set<Instructor> instructors = new HashSet<Instructor>();
		
		Instructor instructor;
		
		if(!"000".equals(pp.getInstructor1())){
			instructor = new Instructor();
			instructor.setJobNumber(pp.getInstructor1());
			instructors.add(instructor);
		}
		if(!"000".equals(pp.getInstructor2())){
			instructor = new Instructor();
			instructor.setJobNumber(pp.getInstructor2());
			if(!instructors.contains(instructor)){
				instructors.add(instructor);
			}
		}
		
		
		College college = new College();
		college.setCollegeId(pp.getCollegeId());
		
		ProjectType projectType = new ProjectType();
		projectType.setProjectTypeId(1);
		
		ProjectStatu projectStatu = new ProjectStatu();
		projectStatu.setProjectStatuId(2);
		//新建项目
		Project project = new Project(pp.getName(), 
										pp.getStartTime(), 
										pp.getEndTime(),
										pp.getFunds(),
										principal,
										projectMembers,
										instructors,
										college,
										projectStatu,
										pp.getDescription(),
										projectType);
		return project;
	}
	//生成修改或者查看页面需要的参数
	@Override
	public <T> void createPPmi(ProjectAndPage<T> pp,Project project) {
		
		
		/*利用反射给修改界面的成员选择预备好这个项目已经选入的成员**/
		Class clazz1 = pp.getClass();
		//Student[] members = (Student[]) project.getProjectMembers().toArray();
		int i = 0;
		for(Student member:project.getProjectMembers()){
			
			String id = "setStudent" + (i + 1);
			try {
				Method m = clazz1.getDeclaredMethod(id, String.class);
				try {
					m.invoke(pp,member.getStudentNo());
				} catch (IllegalArgumentException e) {
					
					e.printStackTrace();
				} catch (IllegalAccessException e) {
				
					e.printStackTrace();
				} catch (InvocationTargetException e) {
				
					e.printStackTrace();
				}
			} catch (SecurityException e) {
				
				e.printStackTrace();
			} catch (NoSuchMethodException e) {
				
				e.printStackTrace();
			}
			i++;
		}
		
		/*利用反射给修改界面的指导老师选择预备好这个项目已经选入的指导老师**/
		Class clazz2 = pp.getClass();
		//Instructor[] instructors = (Instructor[]) project.getProjectMembers().toArray();
		int j = 0;
		for(Instructor instructor:project.getInstructors()){
			String id = "setInstructor" + (j + 1);
			try {
				Method m = clazz2.getDeclaredMethod(id, String.class);
				try {
					m.invoke(pp,instructor.getJobNumber());
				} catch (IllegalArgumentException e) {
					
					e.printStackTrace();
				} catch (IllegalAccessException e) {
				
					e.printStackTrace();
				} catch (InvocationTargetException e) {
				
					e.printStackTrace();
				}
			} catch (SecurityException e) {
				
				e.printStackTrace();
			} catch (NoSuchMethodException e) {
				
				e.printStackTrace();
			}
			j++;
		}
		pp.setName(project.getName());
		pp.setStartTime(project.getStartTime());
		pp.setEndTime(project.getEndTime());
		pp.setFunds(project.getFunds());
		pp.setPrincipalId(project.getPrincipal().getStudentNo());
		pp.setCollegeId(project.getCollege().getCollegeId());
		pp.setDescription(project.getDescription());
	
	}
	//根据修改项目页面传递过来的参数生成一个项目
	@Override
	public <T> void createUpdateProject(ProjectAndPage<T> pp,Project project) {
		Student principal = new Student();
		principal.setStudentNo(pp.getPrincipalId());
		
		Set<Student> projectMembers = new HashSet<Student>();
		
		Student student;
		if(!"000".equals(pp.getStudent1())){
			student = new Student();
			student.setStudentNo(pp.getStudent1());
			projectMembers.add(student);
			
		}
		if(!"000".equals(pp.getStudent2())){
			student = new Student();
			student.setStudentNo(pp.getStudent2());
			
			if(!projectMembers.contains(student)){
				projectMembers.add(student);
			}
		}
		if(!"000".equals(pp.getStudent3())){
			student = new Student();
			student.setStudentNo(pp.getStudent3());
			if(!projectMembers.contains(student)){
				projectMembers.add(student);
			}
		}
		if(!"000".equals(pp.getStudent4())){
			student = new Student();
			student.setStudentNo(pp.getStudent4());
			if(!projectMembers.contains(student)){
				projectMembers.add(student);
			}
		}
		
		Set<Instructor> instructors = new HashSet<Instructor>();
		
		Instructor instructor;
		if(!"000".equals(pp.getInstructor1())){
			instructor = new Instructor();
			instructor.setJobNumber(pp.getInstructor1());
			instructors.add(instructor);
		}
		if(!"000".equals(pp.getInstructor2())){
			instructor = new Instructor();
			instructor.setJobNumber(pp.getInstructor2());
			if(!instructors.contains(instructor)){
				instructors.add(instructor);
			}
		}
		
		
		
		College college = new College();
		college.setCollegeId(pp.getCollegeId());
		
		ProjectType projectType = new ProjectType();
		projectType.setProjectTypeId(1);
		
		ProjectStatu projectStatu = new ProjectStatu();
		projectStatu.setProjectStatuId(2);
		
		project.setName(pp.getName());
		project.setStartTime(pp.getStartTime());
		project.setEndTime(pp.getEndTime());
		project.setFunds(pp.getFunds());
		project.setDescription(pp.getDescription());
		project.setPrincipal(principal);
		project.setProjectMembers(projectMembers);
		project.setInstructors(instructors);
		project.setProjectStatu(projectStatu);
		project.setCollege(college);
		project.setProjectType(projectType);
		
	}
	
	
	/*往数据库中增加一个项目资料**/
	@Override
	public void add(Object object) {
		studentDao.add(object);
		
	}
	/*更新项目资料**/
	@Override
	public void update(Object object) {
		studentDao.Update(object);
		
	}
	/*根据id查找记录**/
	@Override
	public <T> T find(Class<T> entity, Integer id) {
		
		return (T)studentDao.find(entity, id);
		
	}
	
	public void saveFile(HttpServletRequest request,ProjectData projectData, String fileName, File upload,String type) {
		
		String realFileName = fileName.substring(0, fileName.lastIndexOf("."));
		String ext = fileName.substring(fileName.lastIndexOf("."));
		fileName = UUID.randomUUID().toString() + ext;
		
		String filePath = "e:/ProjectManagement/file/project" + projectData.getProject().getProjectId()
					+ "/"+projectData.getProject().getName()+"/"+type+"/";
		File filePathDir = new File(filePath);
		
		if(!filePathDir.exists()){
			filePathDir.mkdirs();
		}
		File file = new File(filePathDir,fileName);
		
		try {
			FileOutputStream fos = new FileOutputStream(file);
			FileInputStream fis = new FileInputStream(upload);
			byte[] buffer = new byte[1024];
			int length;
		
				while((length = fis.read(buffer)) > 0){
					fos.write(buffer,0,length);	
				}
				fos.close();
				fis.close();
			
		} catch (FileNotFoundException e) {
			
			e.printStackTrace();
		} catch (IOException e) {
		
			e.printStackTrace();
		}
		try {
			Method m1 = ProjectData.class.getDeclaredMethod("set"+type+"Name", String.class);
			Method m2 = ProjectData.class.getDeclaredMethod("set"+type+"FileName", String.class);
			try {
				m1.invoke(projectData, fileName);
				m2.invoke(projectData, realFileName);
			} catch (IllegalArgumentException e) {
				
				e.printStackTrace();
			} catch (IllegalAccessException e) {
			
				e.printStackTrace();
			} catch (InvocationTargetException e) {
			
				e.printStackTrace();
			}
		} catch (SecurityException e) {
			
			e.printStackTrace();
		} catch (NoSuchMethodException e) {
		
			e.printStackTrace();
		}
		
		 //调用转换类DocConverter,并将需要转换的文件传递给该类的构造方法  
        DocConverter d = new DocConverter(filePath+"/"+fileName);  
        //调用conver方法开始转换，先执行doc2pdf()将office文件转换为pdf;再执行pdf2swf()将pdf转换为swf;  
        d.conver();  
        //调用getswfPath()方法，打印转换后的swf文件路径  
        System.out.println(d.getswfPath());  
        //生成swf相对路径，以便传递给flexpaper播放器  
        String swfpath = "upload"+d.getswfPath().substring(d.getswfPath().lastIndexOf("/"));  
        System.out.println(swfpath);  
        //将相对路径放入sessio中保存  
        requestsession.setAttribute("swfpath", swfpath);  
        out.println("上传的文件:"+lastFileName);  
        out.println("文件类型"+extName);  
        out.println("<hr>");  
	}
	
	//查询登陆学生负责的所有项目
		@Override
		public QueryResult<Project> getProjects(Student student) {
			
			StringBuffer where = new StringBuffer();
			List<Object> parameters = new ArrayList<Object>();
			where.append("o.principal = ?");
			parameters.add(student);
			Map<String,String> orderBy = new LinkedHashMap<String,String>();
			orderBy.put("startTime", "desc");
			QueryResult<Project> qrPro = studentDao.getQueryResult(Project.class, parameters.toArray(), where.toString());
			
			return qrPro;
		}
		
}
