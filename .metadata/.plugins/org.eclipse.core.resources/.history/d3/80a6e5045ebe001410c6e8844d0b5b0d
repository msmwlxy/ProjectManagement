package org.future.projectManagement.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.struts2.ServletActionContext;
import org.future.projectManagement.bean.AchImage;
import org.future.projectManagement.bean.College;
import org.future.projectManagement.bean.Instructor;
import org.future.projectManagement.bean.Project;
import org.future.projectManagement.bean.ProjectAndPage;
import org.future.projectManagement.bean.ProjectData;
import org.future.projectManagement.bean.ProjectLog;
import org.future.projectManagement.bean.Student;
import org.future.projectManagement.bean.Thesis;
import org.future.projectManagement.service.StudentService;
import org.future.projectManagement.utils.FileLocation;
import org.future.projectManagement.utils.QueryResult;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.ModelDriven;
@Component
@Scope("prototype")
public class StudentAction extends ActionSupport implements ModelDriven<ProjectAndPage<ProjectLog>>{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/*学号**/
	private String studentNo;
	/*姓名**/
	private String name;
	/*年级**/
	private String grade;
	/*电话**/
	private String phone;
	/*邮箱**/
	private String email;
	/*学院id**/
	private Integer collegeId;
	/*登陆密码**/
	private String password;
	/*用于封装浏览器传过来的request参数，此外还为分页提供方便**/
	private ProjectAndPage<ProjectLog> pp = new ProjectAndPage<ProjectLog>();
	
	private static Properties allowAchImages = new Properties();//用来装载允许的成果图片类型
	/*student服务**/
	private StudentService studentService;
	
	
	/*下载的文件类型**/
	private String contentType;
	/*下载的文件名**/
	private String fileName;
	/*下载的文件的文件位置**/
	private String fileLocation;
	
	
	/*以下是文件上传需要的属性**/
	
	/*上传的文件**/
	private File upload;
	/*上传的文件名**/
	private String uploadFileName;
	/*上传的文件类型**/
	private String uploadContentType;
	
	
	/*以下是成果图片上传需要的属性**/
	
	/*上传的成果图片集合**/
	private List<File> achImages;
	/*上传的成果图片名集合**/
	private List<String> achImagesFileName;
	/*上传的成果图片类型集合**/
	private List<String> achImagesContentType;
	
	/*用于消息提示页面跳转到另一个页面的url**/
	private String returnUrl;
	/*用于消息提示页面的提示信息**/
	private String promptMessage;
	
	
	public String getReturnUrl() {
		return returnUrl;
	}
	public void setReturnUrl(String returnUrl) {
		this.returnUrl = returnUrl;
	}
	public String getPromptMessage() {
		return promptMessage;
	}
	public void setPromptMessage(String promptMessage) {
		this.promptMessage = promptMessage;
	}
	
	
	
	
	
	public List<File> getAchImages() {
		return achImages;
	}
	public void setAchImages(List<File> achImages) {
		this.achImages = achImages;
	}
	public List<String> getAchImagesFileName() {
		return achImagesFileName;
	}
	public void setAchImagesFileName(List<String> achImagesFileName) {
		this.achImagesFileName = achImagesFileName;
	}
	public List<String> getAchImagesContentType() {
		return achImagesContentType;
	}
	public void setAchImagesContentType(List<String> achImagesContentType) {
		this.achImagesContentType = achImagesContentType;
	}
	public String getContentType() {
		return contentType;
	}
	public void setContentType(String contentType) {
		this.contentType = contentType;
	}
	
	
	public void setFileName(String fileName) {
		this.fileName = fileName;
	}
	
	public String getFileLocation() {
		return fileLocation;
	}
	public void setFileLocation(String fileLocation) {
		this.fileLocation = fileLocation;
	}
	
	

	public StudentService getStudentService() {

		return studentService;
	}
	@Resource
	public void setStudentService(StudentService studentService) {
		this.studentService = studentService;
	}

	

	public String getStudentNo() {
		return studentNo;
	}

	public void setStudentNo(String studentNo) {
		this.studentNo = studentNo;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getGrade() {
		return grade;
	}

	public void setGrade(String grade) {
		this.grade = grade;
	}

	public String getPhone() {
		return phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public Integer getCollegeId() {
		return collegeId;
	}

	public void setCollegeId(Integer collegeId) {
		this.collegeId = collegeId;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public ProjectAndPage<ProjectLog> getPp() {
		return pp;
	}

	public void setPp(ProjectAndPage<ProjectLog> pp) {
		this.pp = pp;
	}
	
	public HttpServletRequest getRequest(){
		return ServletActionContext.getRequest();
	}
	
	
	public File getUpload() {
		return upload;
	}
	public void setUpload(File upload) {
		this.upload = upload;
	}
	public String getUploadFileName() {
		return uploadFileName;
	}
	public void setUploadFileName(String uploadFileName) {
		this.uploadFileName = uploadFileName;
	}
	public String getUploadContentType() {
		return uploadContentType;
	}
	public void setUploadContentType(String uploadContentType) {
		this.uploadContentType = uploadContentType;
	}
	static{
		try {
			allowAchImages.load(StudentAction.class.getClassLoader().getResourceAsStream("UploadImageType.properties"));
		} catch (IOException e) {
			
			e.printStackTrace();
		}
	}
	@Override
	public ProjectAndPage<ProjectLog> getModel() {
		
		return this.pp;
	}
	
	/*查看已申报的项目**/
	public String lookReportProjectUI(){
		
		StringBuffer where = new StringBuffer();
		List<Object> parameters = new ArrayList<Object>();
		LinkedHashMap<String,String> orderBy = new LinkedHashMap<String,String>();
		orderBy.put("startTime", "asc");
		
		where.append("o.principal = ?");
		//Student student = (Student) this.getRequest().getSession().getAttribute("loader");
		
		Student student = new Student();
		student.setStudentNo("001");
		parameters.add(student);
		QueryResult<Project> qr = studentService.getQueryResult(Project.class, parameters.toArray(),
				where.toString(), orderBy);
		this.getRequest().setAttribute("qr", qr);
		return "lookReportProjectUI";
	}
	/*查看申报项目的详细信息**/
	public String projectDetailedInfUI(){
		
		Project project = studentService.find(Project.class, pp.getProjectId());
		if(project!=null){
			this.getRequest().setAttribute("project", project);
		}
		return "projectDetailedInfUI";
	}
	/*返回要下载文件的文件名**/
	public String getFileName() {
		
		try {
			fileName=new String(new String("项目申报书.doc").getBytes(),"ISO-8859-1");//对文件名重新编码，否则用户从浏览器下载的文件名会出现问题
			
		} catch (UnsupportedEncodingException e) {
			
			e.printStackTrace();
		}
	
	return fileName;
}
	/*返回要下载文件的的输入流**/
	public InputStream getTargetFile(){
		this.setFileLocation(FileLocation.readUrl("reportBook"));
		FileInputStream is = null;
		try {
			is = new FileInputStream(new File(this.fileLocation));
		} catch (FileNotFoundException e) {
		
			e.printStackTrace();
		}
		return is;
	}
	
	
	/*进入申报项目页面**/
	public String reportProjectUI(){
		
		List<Object> parameters = new ArrayList<Object>();
		StringBuffer where = new StringBuffer();
		
		//Student student = (Student)this.getRequest().getSession().getAttribute("loader");
	
		//以下五句模拟学生已经登录
		Student student = new Student();
		student.setStudentNo("001");
		College college = new College();
		college.setCollegeId(1);
		student.setCollege(college);
		
		parameters.add(student.getCollege());
		where.append("o.college = ?");
		
		LinkedHashMap<String,String> orderBy = new LinkedHashMap<String,String>();
		orderBy.put("name", "asc");
		
		QueryResult<Student> qrStu = studentService.getQueryResult(Student.class, 
																parameters.toArray(),
															where.toString(), orderBy);
		//模拟一个姓名为无的学生添加到集合中	
		Student fakeStu = new Student();
		fakeStu.setStudentNo("000");
		fakeStu.setName("无");
		qrStu.getResults().add(0, fakeStu);
		for(Student stu:qrStu.getResults()){
			System.out.println(stu.getName());
		}
		Map<String,String> members = new LinkedHashMap<String,String>();
		for(Student member:qrStu.getResults()){
			members.put(member.getStudentNo(), member.getName());
		}
		this.getRequest().setAttribute("members",members);
		
		
		
		
		//查询出所有的指导老师
		QueryResult<Instructor> qrIns = studentService.getQueryResult(Instructor.class,
				parameters.toArray(), where.toString(), orderBy);
		Map<String,String> instructors = new LinkedHashMap<String,String>();
		
		//模拟一个假指导老师放到map集合最前面
		Instructor fakeIns = new Instructor();
		fakeIns.setJobNumber("000");
		fakeIns.setName("无");
		qrIns.getResults().add(0,fakeIns);
		
		
		for(Instructor instructor:qrIns.getResults()){
			instructors.put(instructor.getJobNumber(), instructor.getName());
		}
		this.getRequest().setAttribute("instructors", instructors);
		
		
		
		
		
		
		//查询出所有院系
		where = new StringBuffer();
		parameters.clear();
		
		QueryResult<College> qrCol = studentService.getQueryResult(College.class);
		
		Map<Integer,String> colleges = new HashMap<Integer,String>();
		for(College col:qrCol.getResults()){
			colleges.put(col.getCollegeId(), col.getName());
		}
		this.getRequest().setAttribute("colleges", colleges);
		
		return "reportProjectUI";
	}
	/*申报项目**/
	public String reportProject(){
		/*判断传递过来的参数是否存在问题，如果有一个参数存在问题，则不处理，提示用户参数错误**/
		if(pp.getName()!=null&&!"".equals(pp.getName().trim())
				&&pp.getCollegeId()!=null&&pp.getCollegeId()>0
				&&pp.getStartTime()!=null&&pp.getEndTime()!=null&&pp.getStartTime().before(pp.getEndTime())
				&&pp.getPrincipalId()!=null
				&&pp.getDescription()!=null&&!"".equals(pp.getDescription())
				&&pp.getFunds()!=null&&pp.getFunds()>0
				){
	
		Project project = studentService.createProject(pp);
		
		//添加项目
		studentService.add(project);
		this.getRequest().setAttribute("message", "申报成功");

		}else{
		//因填写的申报信息有问题的处理	
		this.getRequest().setAttribute("message", "填写的申报信息有问题，申报失败");	
		
		}
		return "message";
	}
	/*查看项目审核日志**/
	public String lookProjectLogUI(){
		StringBuffer where = new StringBuffer();
		List<Object> parameters = new ArrayList<Object>();
		
		where.append("o.project = ?");
		Project project = studentService.find(Project.class, pp.getProjectId());
		parameters.add(project);
		
		LinkedHashMap<String,String> orderBy = new LinkedHashMap<String,String>();
		pp.setStartResultIndex();
		QueryResult<ProjectLog> qrProLog = studentService.getQueryResult(ProjectLog.class, pp.getStartResultIndex(), pp.getPageMaxResult(), parameters.toArray(),
				where.toString(), orderBy);
		
		pp.setNumber(qrProLog);
		this.getRequest().setAttribute("project", project);
		this.getRequest().setAttribute("pp", pp);
		return "lookProjectLogUI";
	}
	/*进入更新项目页面**/
	public String updateProjectUI(){
		Project project = studentService.find(Project.class, pp.getProjectId());
		if(project!=null){
			
			//生成修改页面需要的参数（将project的个属性装入model）
			studentService.createPPmi(pp, project);
			
			//Student student = (Student)this.getRequest().getSession().getAttribute("loader");
			//以下五句做测试用
			Student student = new Student();
			student.setStudentNo("001");
			College college = new College();
			college.setCollegeId(1);
			
			student.setCollege(college);
			
			//查询所有和登陆学生一个院的学生
			List<Object> parameters = new ArrayList<Object>();
			StringBuffer where = new StringBuffer();
			parameters.add(student.getCollege());
			where.append("o.college = ?");
			
			LinkedHashMap<String,String> orderBy = new LinkedHashMap<String,String>();
			orderBy.put("name", "asc");
			
			Student fakeStu = new Student();
			fakeStu.setStudentNo("000");
			fakeStu.setName("无");
			QueryResult<Student> qrStu = studentService.getQueryResult(Student.class, 
																	parameters.toArray(),
																where.toString(), orderBy);
			//模拟一个假的姓名为无的学生添加到集合中	
			qrStu.getResults().add(0, fakeStu);
			Map<String,String> members = new LinkedHashMap<String,String>();
			for(Student member:qrStu.getResults()){
				members.put(member.getStudentNo(), member.getName());
			}
			this.getRequest().setAttribute("members",members);
			this.getRequest().setAttribute("membertotal", project.getProjectMembers().size());
			
			//查询出所有的指导老师
			QueryResult<Instructor> qrIns = studentService.getQueryResult(Instructor.class,
					parameters.toArray(), where.toString(), orderBy);
			Map<String,String> instructors = new LinkedHashMap<String,String>();
			
			//模拟一个假指导老师放到map集合最前面
			Instructor fakeIns = new Instructor();
			fakeIns.setJobNumber("000");
			fakeIns.setName("无");
			qrIns.getResults().add(0,fakeIns);
			
			
			for(Instructor instructor:qrIns.getResults()){
				instructors.put(instructor.getJobNumber(), instructor.getName());
			}
			this.getRequest().setAttribute("instructors", instructors);
			this.getRequest().setAttribute("instructortotal", project.getInstructors().size());
			//查询出所有的院系
			where = new StringBuffer();
			parameters.clear();
			
			QueryResult<College> qrCol = studentService.getQueryResult(College.class);
			
			Map<Integer,String> colleges = new HashMap<Integer,String>();
			for(College col:qrCol.getResults()){
				colleges.put(col.getCollegeId(), col.getName());
			}
			this.getRequest().setAttribute("colleges", colleges);
		}
		
		return "updateProjectUI";
	}
	
	/*修改项目申报**/
	public String updateProject(){
		
		/*判断传递过来的参数是否存在问题，如果有一个参数存在问题，则不处理，提示用户参数错误**/
		if(pp.getName()!=null&&!"".equals(pp.getName().trim())
				&&pp.getCollegeId()!=null&&pp.getCollegeId()>0
				&&pp.getStartTime()!=null&&pp.getEndTime()!=null&&pp.getStartTime().before(pp.getEndTime())
				&&pp.getPrincipalId()!=null
				&&pp.getDescription()!=null&&!"".equals(pp.getDescription())
				&&pp.getFunds()!=null&&pp.getFunds()>0
				){
				
					Project project = studentService.find(Project.class, pp.getProjectId());
					
					if(project!=null){
						
						studentService.createUpdateProject(pp, project);
						
						studentService.update(project);
						//修改成功
						this.getRequest().setAttribute("message", "修改成功");
						
					}else{
					//项目不存在的处理
					this.getRequest().setAttribute("message", "此项目不存在");
					}
				
		}else{
					//填写的项目申报信息存在问题
					this.getRequest().setAttribute("message", "填写的修改信息有问题，修改失败");	
					
		}
		return "message";
		
	}
	/*下载项目申报书**/
	public String downloadReportBook(){
	
		return "success";
	}
	
	
	
	
	//以下是上传文件------------------------------------------------------------------
	
	
	/*进入所有项目的上传中期检查报告页面**/
	public String uploadMidFUI(){
		//以下两句做测试用
		Student student = new Student();
		student.setStudentNo("001");
		
		QueryResult<Project> projects = studentService.getProjects(student);
		this.getRequest().setAttribute("projects", projects);
		return "uploadMidFUI";
	}
	/*进入所有项目的上传中期检查报告页面**/
	public String uploadMidUI(){
		//以下两句做测试用
		
		return "uploadMidUI";
	}
	/*上传中期检查报告**/
	public String uploadMid(){
		System.out.println(this.upload);
		System.out.println(pp.getProjectId());
		if(this.upload!=null){
			if(this.uploadContentType.equals("application/msword")){
				
				ProjectData projectData = studentService.getPdByPid(pp.getProjectId());
				//项目资料存在标记，用于标记项目的项目资料是否存在
				int tag = 0;
				//如果当前项目不存在项目资料，则为当前项目新创建一个项目资料
				if(projectData==null){
					tag++;
					projectData = new ProjectData();
					
					Project project = studentService.find(Project.class, pp.getProjectId());
					if(project!=null){
						projectData.setProject(project);
						project.setProjectData(projectData);
					}
					
				}
				String type = "MidCheck";
				//调用projectDataService的服务方法保存上传的文件
				studentService.saveFile(projectData,uploadFileName,upload,type);
				
				if(tag==1){
					studentService.add(projectData);
				}else{
					studentService.update(projectData);
				}
				
				this.getRequest().setAttribute("message", "上传中期检查报告成功");
			}else{
				this.getRequest().setAttribute("message", "必须上传word文档");
			}
		}else{
			this.getRequest().setAttribute("message", "请上传文件");
		}
		return "message";
	}
	
	
	
	/*进入所有项目的上传结项报告页面**/
	public String uploadOverFUI(){
		//以下两句做测试用，模拟学生登录
		Student student = new Student();
		student.setStudentNo("001");
		
		QueryResult<Project> projects = studentService.getProjects(student);
		this.getRequest().setAttribute("projects", projects);
		return "uploadOverFUI";
	}
	
	/*进入上传结项报告页面**/
	public String uploadOverUI(){
		
		return "uploadOverUI";
	}
	
	
	/*上传结项报告**/
	public String uploadOver(){
		
		if(this.upload!=null){
			if(this.uploadContentType.equals("application/msword")){
				
				ProjectData projectData = studentService.getPdByPid(pp.getProjectId());
				//项目资料存在标记，用于标记项目的项目资料是否存在
				int tag = 0;
				//如果当前项目不存在项目资料，则为当前项目新创建一个项目资料
				if(projectData==null){
					tag++;
					projectData = new ProjectData();
					
					Project project = studentService.find(Project.class, pp.getProjectId());
					if(project!=null){
						projectData.setProject(project);
						project.setProjectData(projectData);
					}
					
				}
				String type = "OverReport";
				//调用projectDataService的服务方法保存上传的文件
				studentService.saveFile(projectData,uploadFileName,upload,type);
				
				if(tag==1){
					studentService.add(projectData);
				}else{
					studentService.update(projectData);
				}
				this.getRequest().setAttribute("message", "上传结项报告成功");
			}else{
				this.getRequest().setAttribute("message", "必须上传word文档");
			}
		}else{
			this.getRequest().setAttribute("message", "请上传文件");
		}
		return "message";
	}
	
	/*上传论文**/
	public String uploadThesisFUI(){
		//以下两句做测试用
		Student student = new Student();
		student.setStudentNo("001");
		QueryResult<Project> projects = studentService.getProjects(student);
		this.getRequest().setAttribute("projects", projects);
		return "uploadThesisFUI";
		
	}
	/*进入上传论文页面**/
	public String uploadThesisUI(){
		
		return "uploadThesisUI";
	}
	/*上传论文**/
	public String uploadThesis(){
		
		if(this.upload!=null){
			if(this.uploadContentType.equals("application/msword")){
				
				ProjectData projectData = studentService.getPdByPid(pp.getProjectId());
				//项目资料存在标记，用于标记项目的项目资料是否存在
				int tag = 0;
				//如果当前项目不存在项目资料，则为当前项目新创建一个项目资料
				if(projectData==null){
					tag++;
					projectData = new ProjectData();
					
					Project project = studentService.find(Project.class, pp.getProjectId());
					if(project!=null){
						projectData.setProject(project);
						project.setProjectData(projectData);
					}
					
				}
				//如果当前项目对应的消息资料不存在，则新建一个项目资料
				if(tag==1){
					studentService.add(projectData);
				}
				
				
				String realFileName = uploadFileName.substring(0, uploadFileName.lastIndexOf("."));
				String ext = uploadFileName.substring(uploadFileName.lastIndexOf("."));
				uploadFileName = UUID.randomUUID().toString() + ext;
				
				String filePath = "e:/ProjectManagement/file/project" + projectData.getProject().getProjectId()
							+ "/"+projectData.getProject().getName()+"/Thesis/";
				File filePathDir = new File(filePath);
				
				if(!filePathDir.exists()){
					filePathDir.mkdirs();
				}
				File file = new File(filePathDir,uploadFileName);
				
				try {
					FileOutputStream fos = new FileOutputStream(file);
					FileInputStream fis = new FileInputStream(upload);
					byte[] buffer = new byte[1024];
					int length;
				
						while((length = fis.read(buffer)) > 0){
							fos.write(buffer,0,length);	
						}
						fos.close();
						fis.close();
					
				} catch (FileNotFoundException e) {
					
					e.printStackTrace();
				} catch (IOException e) {
				
					e.printStackTrace();
				}
				Thesis thesis = new Thesis();
				thesis.setFileName(uploadFileName);
				thesis.setName(realFileName);
				thesis.setProjectData(projectData);
				thesis.setDateline(new Date());
				studentService.add(thesis);
				
				this.getRequest().setAttribute("message", "上传论文成功");
			}else{
				this.getRequest().setAttribute("message", "必须上传word文档");
			}
		}else{
			this.getRequest().setAttribute("message", "请上传文件");
		}
		return "message";
	}
	/*进入上传成果图片界面**/
	public String uploadAchImageUI(){

		return "uploadAchImageUI";
	}
	/*上传成果图片**/
	public String uploadAchImage(){

		if(this.achImages!=null&&this.achImages.size()>0){
			List<String> allowType = new ArrayList<String>();
			for(Object key:allowAchImages.keySet()){
				String value = (String) allowAchImages.get(key);
				String[] values = value.split(",");
				for(String v:values){
					allowType.add(v);
				}
			}
			
			HashMap<String,String> map = new HashMap<String,String>();
			for(int i = 0;i < this.achImages.size();i++){
				map.put(this.achImagesFileName.get(i), this.achImagesContentType.get(i));
			}
			for(String key:map.keySet()){
				String ext = key.substring(key.lastIndexOf(".")+1);
				if(!allowType.contains(map.get(key).toLowerCase())){
					
					this.getRequest().setAttribute("message", "上传文件中有格式不正确的图片");
					return "message";
				}
						
			}
			int i = 0;
			for(String key:map.keySet()){
				
				ProjectData projectData = studentService.getPdByPid(pp.getProjectId());
				int tag = 0;
				//如果当前项目不存在项目资料，则为当前项目新创建一个项目资料
				if(projectData==null){
					tag++;
					projectData = new ProjectData();
					
					Project project = studentService.find(Project.class, pp.getProjectId());
					if(project!=null){
						projectData.setProject(project);
						project.setProjectData(projectData);
					}
					
				}
				//如果当前项目对应的消息资料不存在，则新建一个项目资料
				if(tag==1){
					studentService.add(projectData);
				}
				
				String ext = key.substring(key.lastIndexOf("."));
				String imageName = UUID.randomUUID().toString() + ext;
				

				String achImagePath = "e:/ProjectManagement/file/project" + projectData.getProject().getProjectId()
						+ "/"+projectData.getProject().getName()+"/achImage/";
				
				

				File achImageDir = new File(achImagePath);
				
				
				if(!achImageDir.exists()){
					achImageDir.mkdirs();
				}
				
			
				File achImage = new File(achImageDir,imageName);
				
				try{		
				FileOutputStream os = new FileOutputStream(achImage);
				FileInputStream is = new FileInputStream(this.achImages.get(i));
				
				byte[] buffer = new byte[1024*1024];
				int length;
				while((length = is.read(buffer)) > 0){
					os.write(buffer,0,length);
				}
						
					os.close();
					is.close();
				}catch(Exception e){
					e.printStackTrace();
				}
						i++;// 标识循环到第几个上传文件
					AchImage image = new AchImage();
					image.setImageName(imageName);
					
			}
		}else{
			this.getRequest().setAttribute("message", "请上传成果图片");
		}
			this.getRequest().setAttribute("message", "所有图片添加成功");
			
		return "message";

	}
	/*用于跳转到消息提示页面**/
	public String prompt(){
		return "prompt";
	}
}
