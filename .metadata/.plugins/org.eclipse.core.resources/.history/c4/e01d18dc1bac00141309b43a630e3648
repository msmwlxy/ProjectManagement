package org.future.projectManagement.service.imp;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Set;

import javax.annotation.Resource;

import org.future.projectManagement.bean.College;
import org.future.projectManagement.bean.Instructor;
import org.future.projectManagement.bean.Project;
import org.future.projectManagement.bean.ProjectAndPage;
import org.future.projectManagement.bean.ProjectStatu;
import org.future.projectManagement.bean.ProjectType;
import org.future.projectManagement.bean.Student;
import org.future.projectManagement.dao.StudentDao;
import org.future.projectManagement.service.StudentService;
import org.future.projectManagement.utils.QueryResult;
import org.springframework.stereotype.Component;
@Component
public class StudentServiceImp implements StudentService {
	
	private StudentDao studentDao;

	

	public StudentDao getStudentDao() {
		return studentDao;
	}

	@Resource
	public void setStudentDao(StudentDao studentDao) {
		this.studentDao = studentDao;
	}
	
	/*添加学生**/
	@Override
	public void add(Student student){
		studentDao.add(student);
	}
	
	/*根据学号查找学生**/
	@Override
	public Student find(Class<Student> StudentClass,String id){
		return studentDao.find(StudentClass, id);
	}
	
	/*更新学生信息**/
	@Override
	public void Update(Student student){
		studentDao.Update(student);
	}
	
	//根据开始索引，最大学生数和查询条件来得到要查询的学生集合,并且对结果集进行排序
	@Override
	public  QueryResult<Student> getQueryResult(Class<Student> StudentClass,int startIndex, int MaxResults,
			Object[] parameters, String where,
			LinkedHashMap<String, String> orderBy)  {
		return studentDao.getQueryResult(StudentClass, startIndex, MaxResults, parameters, where, orderBy);
	}
	
	//查找所有的学生
	
	@Override
	public  QueryResult<Student> getQueryResult(Class<Student> StudentClass) {
		return this.getQueryResult(StudentClass,-1, -1, null, null, null);	
	}
	
	//根据开始索引，最大学生数和查询条件得到要查询的学生的集合
	
	@Override
	public  QueryResult<Student> getQueryResult(Class<Student> StudentClass,int startIndex, int MaxResults,
			Object[] parameters, String where) {
		return this.getQueryResult(StudentClass,startIndex, MaxResults, parameters, where, null);
	}
	
	//根据开始索引和要查询的最大学生数得到要查询的学生集合，并且对结果集进行排序
	
	@Override
	public  QueryResult<Student> getQueryResult(Class<Student> StudentClass,int startIndex, int MaxResults,
			LinkedHashMap<String, String> orderBy) {
		
		return this.getQueryResult(StudentClass,startIndex, MaxResults, null, null, orderBy);
	}
	
	//根据查询条件得到要查询的结果集，并且对结果集中的学生进行排序
	
	@Override
	public  QueryResult<Student> getQueryResult(Class<Student> StudentClass,Object[] parameters,
			String where, LinkedHashMap<String, String> orderBy) {
		
		return this.getQueryResult(StudentClass,-1, -1, parameters, where, orderBy);
	}
	
	//根据开始索引和要查询的最大学生数得到要查询的结果
	
	@Override
	public QueryResult<Student> getQueryResult(Class<Student> StudentClass,int startIndex, int MaxResults) {
		
		return this.getQueryResult(StudentClass,startIndex, MaxResults, null, null, null);
	}
	
	//根据查询条件得到要查询的结果集
	
	
	@Override
	public  QueryResult<Student> getQueryResult(Class<Student> StudentClass,Object[] parameters, String where) {
		
		return this.getQueryResult(StudentClass,-1, -1, parameters, where, null);
	}
	//根据申报页面传递过来的参数生成一个项目
	@Override
	public Project createProject(ProjectAndPage<Project> pp) {
		
		Student principal = new Student();
		
		principal.setStudentNo(pp.getPrincipalId());
		
		Set<Student> projectMembers = new HashSet<Student>();
		
		Student student;
		
		if(!"0".equals(pp.getStudent1())){
			student = new Student();
			student.setStudentNo(pp.getStudent1());
		}
		if(!"0".equals(pp.getStudent2())){
			student = new Student();
			student.setStudentNo(pp.getStudent2());
		}
		if(!"0".equals(pp.getStudent3())){
			student = new Student();
			student.setStudentNo(pp.getStudent3());
		}
		if(!"0".equals(pp.getStudent4())){
			student = new Student();
			student.setStudentNo(pp.getStudent4());
		}
		
		Set<Instructor> instructors = new HashSet<Instructor>();
		
		Instructor instructor;
		
		if(!"0".equals(pp.getInstructor1())){
			instructor = new Instructor();
			instructor.setJobNumber(pp.getInstructor1());
		}
		if(!"0".equals(pp.getInstructor2())){
			instructor = new Instructor();
			instructor.setJobNumber(pp.getInstructor2());
		}
		
		
		College college = new College();
		college.setCollegeId(pp.getCollegeId());
		
		ProjectType projectType = new ProjectType();
		projectType.setProjectTypeId(1);
		
		ProjectStatu projectStatu = new ProjectStatu();
		projectStatu.setProjectStatuId(2);
		//新建项目
		Project project = new Project(pp.getName(), 
										pp.getStartTime(), 
										pp.getEndTime(),
										pp.getFunds(),
										principal,
										projectMembers,
										instructors,
										college,
										projectStatu,
										pp.getDescription(),
										projectType);
		return project;
	}
	//生成修改或者查看页面需要的参数
	@Override
	public void createPPmi(ProjectAndPage<Project> pp,Project project) {
		
		
		/*利用反射给修改界面的成员选择预备好这个项目已经选入的成员**/
		Class clazz1 = pp.getClass();
		//Student[] members = (Student[]) project.getProjectMembers().toArray();
		int i = 0;
		for(Student studen:project.getProjectMembers()){
			
			String id = "setStudent" + (i + 1);
			try {
				Method m = clazz1.getDeclaredMethod(id);
				try {
					m.invoke(pp,members[i].getStudentNo());
				} catch (IllegalArgumentException e) {
					
					e.printStackTrace();
				} catch (IllegalAccessException e) {
				
					e.printStackTrace();
				} catch (InvocationTargetException e) {
				
					e.printStackTrace();
				}
			} catch (SecurityException e) {
				
				e.printStackTrace();
			} catch (NoSuchMethodException e) {
				
				e.printStackTrace();
			}
		}
		
		/*利用反射给修改界面的指导老师选择预备好这个项目已经选入的指导老师**/
		Class clazz2 = pp.getClass();
		Instructor[] instructors = (Instructor[]) project.getProjectMembers().toArray();
		for(int i = 0;i < instructors.length;i++){
			String id = "setInstructor" + (i + 1);
			try {
				Method m = clazz2.getDeclaredMethod(id);
				try {
					m.invoke(pp,members[i].getStudentNo());
				} catch (IllegalArgumentException e) {
					
					e.printStackTrace();
				} catch (IllegalAccessException e) {
				
					e.printStackTrace();
				} catch (InvocationTargetException e) {
				
					e.printStackTrace();
				}
			} catch (SecurityException e) {
				
				e.printStackTrace();
			} catch (NoSuchMethodException e) {
				
				e.printStackTrace();
			}
		}
		pp.setName(project.getName());
		pp.setStartTime(project.getStartTime());
		pp.setEndTime(project.getEndTime());
		pp.setFunds(project.getFunds());
		pp.setPrincipalId(project.getPrincipal().getStudentNo());
		pp.setCollegeId(project.getCollege().getCollegeId());
		pp.setDescription(project.getDescription());
	
	}
	//根据修改项目页面传递过来的参数生成一个项目
	@Override
	public void createUpdateProject(ProjectAndPage<Project> pp,Project project) {
		Student principal = new Student();
		principal.setStudentNo(pp.getPrincipalId());
		
		Set<Student> projectMembers = new HashSet<Student>();
		
		Student student;
		if(!"0".equals(pp.getStudent1())){
			student = new Student();
			student.setStudentNo(pp.getStudent1());
		}
		if(!"0".equals(pp.getStudent2())){
			student = new Student();
			student.setStudentNo(pp.getStudent2());
		}
		if(!"0".equals(pp.getStudent3())){
			student = new Student();
			student.setStudentNo(pp.getStudent3());
		}
		if(!"0".equals(pp.getStudent4())){
			student = new Student();
			student.setStudentNo(pp.getStudent4());
		}
		
		Set<Instructor> instructors = new HashSet<Instructor>();
		
		Instructor instructor;
		if(!"0".equals(pp.getInstructor1())){
			instructor = new Instructor();
			instructor.setJobNumber(pp.getInstructor1());
		}
		if(!"0".equals(pp.getInstructor2())){
			instructor = new Instructor();
			instructor.setJobNumber(pp.getInstructor2());
		}
		
		
		
		College college = new College();
		college.setCollegeId(pp.getCollegeId());
		
		ProjectType projectType = new ProjectType();
		projectType.setProjectTypeId(1);
		
		ProjectStatu projectStatu = new ProjectStatu();
		projectStatu.setProjectStatuId(2);
		
		project.setName(pp.getName());
		project.setStartTime(pp.getStartTime());
		project.setEndTime(pp.getEndTime());
		project.setFunds(pp.getFunds());
		project.setDescription(pp.getDescription());
		project.setPrincipal(principal);
		project.setProjectMembers(projectMembers);
		project.setInstructors(instructors);
		project.setProjectStatu(projectStatu);
		project.setCollege(college);
		project.setProjectType(projectType);
		
	}
	
}
